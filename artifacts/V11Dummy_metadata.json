{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract DummyToken",
						"name": "token_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "TotalBeneficiariesAmountDecrease",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "TotalBeneficiariesAmountIncrease",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "releaseDates",
						"type": "uint256[]"
					}
				],
				"name": "addBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "releaseDate",
						"type": "uint256"
					}
				],
				"name": "addPaymentToBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "indexes",
						"type": "uint256[]"
					}
				],
				"name": "approvePayment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "approver",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					}
				],
				"name": "beneficiary",
				"outputs": [
					{
						"internalType": "uint256[4][]",
						"name": "",
						"type": "uint256[4][]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "forceDelete",
						"type": "bool"
					}
				],
				"name": "cancelPaymentsToBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "changeApprover",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newBeneficiary",
						"type": "address"
					}
				],
				"name": "changeBeneficiaryWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "changedWallets",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "checkWalletChange",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentNonUtilizedAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "releaseDates",
						"type": "uint256[]"
					}
				],
				"name": "extendExistingVesting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCanceledPaymentsAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					}
				],
				"name": "getReasonForCancellation",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "beneficiaries",
						"type": "address[]"
					},
					{
						"internalType": "uint256[][]",
						"name": "indexesPerBeneficiary",
						"type": "uint256[][]"
					}
				],
				"name": "massApproval",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					}
				],
				"name": "release",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "returnBeneficiaryList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timeNow",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract DummyToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalUnreleasedPayments",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "transferExcessBalance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addBeneficiary(address,uint256[],uint256[])": {
					"notice": "Add beneficiary with initial tokens to be received."
				},
				"addPaymentToBeneficiary(address,uint256,uint256)": {
					"notice": "Add additional payments to beneficiary."
				},
				"approvePayment(address,uint256[])": {
					"notice": "Approve payment."
				},
				"beneficiary(address)": {
					"notice": "Returns array with all payments (released and not released) for given beneficiary that will receive the tokens."
				},
				"cancelPaymentsToBeneficiary(address,string,bool)": {
					"notice": "Removes all non released payments to a beneficiary. Only owner can call it in special circumstances. Normally only non approved payments before due date are deleted. Non approved payments after due date can also be deleted (by using force delete). In this way locked tokens from beneficiary with stopped payments, can be freed up."
				},
				"changeApprover(address)": {
					"notice": "Default approver is owner. Owner can change it."
				},
				"changeBeneficiaryWallet(address)": {
					"notice": "Beneficiary can change wallet address for some reason. Can be done only by the beneficiary."
				},
				"constructor": {
					"notice": "Deploys a time-lock instance that is able to hold the token specified, and will only release it to `beneficiary_` when {release} is invoked after `releaseTime_ (parameter at index 1 in  address => uint256[3][])`.  The release time is specified as a Unix timestamp (in seconds)."
				},
				"decimals()": {
					"notice": "Returns the decimal of the token being held."
				},
				"extendExistingVesting(address,uint256[],uint256[])": {
					"notice": "Extends existing dummy vesting scheme."
				},
				"getCanceledPaymentsAddresses()": {
					"notice": "Returns array with addresses of beneficiaries with canceled payments."
				},
				"getReasonForCancellation(address)": {
					"notice": "Returns reason for cancellation of payments of beneficiary."
				},
				"massApproval(address[],uint256[][])": {
					"notice": "Mass approval of payments payment."
				},
				"release(address)": {
					"notice": "Checks if there are released payments for a beneficiary and transfers the tokens to the beneficiary. Can be called by Owner of the contract or the beneficiary."
				},
				"renounceOwnership()": {
					"notice": "Renounce ownership not possible with this smart contract."
				},
				"returnBeneficiaryList()": {
					"notice": "Returns all beneficiary addresses included in the dummy contract."
				},
				"symbol()": {
					"notice": "Returns the symbol of the token being held."
				},
				"token()": {
					"notice": "Returns the token being held."
				},
				"totalUnreleasedPayments()": {
					"notice": "Returns the sum of all locked tokens."
				},
				"transferExcessBalance(address)": {
					"notice": "Owner can transfer excess balance(after canceling of payments or other reason for unutilized payments) to address of his choice."
				}
			},
			"notice": "A token holder contract that will allow a beneficiary to extract the tokens after a given release time and approval from approver. Useful for vesting schedules like \"advisors get their tokens on predefined tim schedule\".",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"vesting_dummy_v11_flat.sol": "V11Dummy"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"vesting_dummy_v11_flat.sol": {
			"keccak256": "0x03068f6e8a476a99f649bac8c88ca2e53e24888fe167be6bbe22f10434c8254a",
			"urls": [
				"bzz-raw://6e7d0ca5a8a2f04c29ef23fa0ec65fe5a8df5db40fd0b63a1c2f6bc72f9ef122",
				"dweb:/ipfs/QmPzvVd1gnvU1U9gQwAKYJ4R9jo8tEwaA1bk39AMemwVE6"
			]
		}
	},
	"version": 1
}